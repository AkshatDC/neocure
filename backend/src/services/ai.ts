import { prisma } from './prisma.js';
import { env } from '../server/config/env.js';
import OpenAI from 'openai';

// Initialize OpenAI client
let openai: OpenAI | null = null;
if (env.OPENAI_API_KEY) {
  openai = new OpenAI({
    apiKey: env.OPENAI_API_KEY,
  });
  console.log('✅ OpenAI API initialized successfully');
} else {
  console.warn('⚠️  OPENAI_API_KEY not set - using mock responses');
}

export async function aiAllergyRisk(params: { userId: string; recordId?: string; symptoms: string[]; context: any }) {
  // TODO: Integrate OpenAI GPT-4 API call with prompt engineering
  // TODO: Retrieve user medical history from Prisma
  // TODO: Use RAG pipeline to augment context with past records
  
  if (!env.OPENAI_API_KEY) {
    console.warn('OPENAI_API_KEY not set, returning mock allergy risk data');
  }

  // Mock response for now
  return {
    risk_score: 'Amber',
    explanation: 'Based on patient history and symptoms, moderate allergy risk detected.',
    alternatives: [{ name: 'Alternative Med A', notes: 'Safer option with fewer side effects' }],
    precautions: ['Avoid exposure to allergen X', 'Monitor symptoms closely'],
  };
}

export async function aiMedicineAlternatives(params: { medicineName: string; context: any }) {
  // TODO: Integrate OpenAI API to suggest safer alternatives
  // TODO: Query external drug databases (FDA, RxNorm)
  
  if (!env.OPENAI_API_KEY) {
    console.warn('OPENAI_API_KEY not set, returning mock alternatives');
  }

  return {
    original: params.medicineName,
    alternatives: [
      { name: 'Alternative A', benefits: 'Lower side effects', risks: 'Minimal', dosage: '10mg daily' },
      { name: 'Alternative B', benefits: 'Better efficacy', risks: 'Moderate', dosage: '5mg twice daily' },
    ],
  };
}

export async function aiSymptomCheck(params: { symptoms: string[]; context: any }) {
  // TODO: Integrate OpenAI API for symptom-based allergy detection
  // TODO: Return possible allergies with confidence scores
  
  if (!env.OPENAI_API_KEY) {
    console.warn('OPENAI_API_KEY not set, returning mock symptom check');
  }

  return {
    possibleAllergies: [
      { name: 'Pollen Allergy', confidence: 0.85, explanation: 'Symptoms match seasonal allergic rhinitis' },
      { name: 'Dust Mite Allergy', confidence: 0.65, explanation: 'Indoor symptoms suggest dust sensitivity' },
    ],
  };
}

export async function getExplanationById(id: string) {
  const risk = await prisma.allergyRisk.findUnique({ where: { id } });
  if (!risk) return null;
  return {
    id: risk.id,
    riskScore: risk.riskScore,
    explanation: risk.explanation,
    alternatives: risk.alternatives,
    precautions: risk.precautions,
    createdAt: risk.createdAt,
  };
}

/**
 * Generate natural language explanation for drug interactions using AI
 */
export async function generateInteractionExplanation(params: {
  drugs: string[];
  severity: string;
  description: string;
}): Promise<string> {
  // Use OpenAI if available
  if (openai) {
    try {
      const prompt = `You are a clinical pharmacist AI assistant. Analyze the following drug interaction:

Drugs: ${params.drugs.join(', ')}
Severity: ${params.severity}
Description: ${params.description}

Provide a detailed, patient-friendly explanation including:
1. What the interaction means
2. Why it occurs (mechanism)
3. What symptoms to watch for
4. Recommendations for the patient
5. When to seek medical attention

Keep the tone professional but accessible. Format with markdown.`;

      const completion = await openai.chat.completions.create({
        model: 'gpt-4',
        messages: [
          { role: 'system', content: 'You are a clinical pharmacist providing drug interaction counseling.' },
          { role: 'user', content: prompt }
        ],
        temperature: 0.7,
        max_tokens: 800,
      });

      return completion.choices[0].message.content || 'Unable to generate explanation';
    } catch (error: any) {
      console.error('OpenAI API error:', error.message);
      // Fall through to mock response
    }
  }
  
  // Fallback mock explanation
  console.warn('Using fallback interaction explanation');
  return `**Drug Interaction Analysis**

**Medications Involved**: ${params.drugs.join(', ')}

**Severity Level**: ${params.severity}

**Clinical Summary**:
${params.description}

**Mechanism**:
When ${params.drugs[0]} is combined with ${params.drugs.slice(1).join(' and ')}, there may be pharmacokinetic or pharmacodynamic interactions that could affect drug efficacy or safety.

**Recommendations**:
1. Monitor patient closely for adverse effects
2. Consider dose adjustments if necessary
3. Consult with a clinical pharmacist for personalized guidance
4. Review patient's complete medication list regularly

*Generated by NeoCure AI Assistant*`;
}
